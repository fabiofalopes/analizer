Neste vÃ­deo vamos melhorar a nossa aplicaÃ§Ã£o de navegaÃ§Ã£o de forma a separar mais claramente aquilo que Ã© o estado da navegaÃ§Ã£o da apresentaÃ§Ã£o da navegaÃ§Ã£o e vamos conseguir fazer isto usando o padrÃ£o observer observable Ou se quiserem o Change notifier que jÃ¡ foi apresentado noutro vÃ­deo e isso vai nos permitir tambÃ©m na pÃ¡gina dois colocar aqui um botÃ£o que nos permite ao selecionar esse botÃ£o saltar diretamente para a pÃ¡gina um de forma muito fÃ¡cil primeira coisa que vou fazer Ã© extrair esta informaÃ§Ã£o que no fundo representa o estado da navegaÃ§Ã£o Qual a pÃ¡gina que estou a mostrar neste momento para uma classe prÃ³pria quando nÃ³s extraÃ­mos informaÃ§Ã£o que tem a ver com a lÃ³gica de apresentaÃ§Ã£o normalmente nÃ³s chamamos a isso um View Model o Model Ã© sÃ£o as classes que representam a lÃ³gica de negÃ³cio vi Model as classes que representam a lÃ³gica de apresentaÃ§Ã£o EntÃ£o vou criar aqui uma classe Main page vi Model notem que eu estou a criar prÃ³prio ficheiro porque hÃ¡ uma ligaÃ§Ã£o muito prÃ³xima entre este Main page Model e o Main page mas num arquitetura mais complexa Possivelmente vocÃªs quererÃ£o extrair esta classe para o seu prÃ³prio ficheiro Vamos entÃ£o passar para aqui o selected index e vamos criar getters e setters para o selected index agora para isto funcionar corretamente dÃ¡me jeito que este View mod seja observÃ¡vel eu quero poder observar e perceber se este selected index mudou e ser avisado por isso E para isso vou usar o padrÃ£o observer observable que em flutter se implementa com o Change notifier ao usar este Change notifier eu tenho que avisar os meus listeners quem me estÃ¡ a observar quando o meu estado muda neste caso o meu estado muda nesta neste Setter e por isso eu vou chamar notify listeners assim qualquer objeto qualquer widget que esteja a observar este View Model serÃ¡ avisado quando mudar este selected index que no fundo significa que el ou carregou aqui ou carregou aqui agora prximo pass Ã© usar aqui o provider como vios no outro vÃ­deo para obter este Main page vi Model Ou seja eu quero injetar esta dependÃªncia aqui dentro do Main Page para isso vamos comeÃ§ar por vir aqui ao Pub e acrescentar este provider que aqui estÃ¡ depois disso nÃ£o se esqueÃ§am de fazer pubg sempre que fazem aqui uma alteraÃ§Ã£o neste ficheiro e depois disso vamos entÃ£o fazer aqui um Wap do My app num provider neste caso tem que ser um Change notifier provider e temos que acrescentar este Create que basicamente cria o objeto que nÃ³s vamos providenciar propagar injetar Se quiserem na my app e em todos os seus descendentes eu vou desta vez usar este formato para devolver diretamente um Main page View Model a partir deste momento em qualquer widget dentro do My app ou descendentes do My app eu posso aceder a este mainpage View Model atravÃ©s do context por exemplo aqui neste mÃ©todo build eu posso fazer um final View Model ig a context Read Main page View Model falta importar o package mas na realidade o que eu quero nÃ£o Ã© bem fazer um read o que eu quero Ã© fazer um watch porquÃª porque eu quero que este Main page seja refrescado seja redesenhado ou seja o build seja chamado novamente de cada vez que o estado deste View Model mudar e por isso eu vou mudar isto para watch ok agora que temos um View Model podemos usÃ¡-lo para substituir isto o que eu quero aqui Ã© o View Model ponto selected index vamos fazer o mesmo aqui e vamos fazer o mesmo aqui notem que eu aqui estou a alterar o selected index ou seja estou a chamar o Setter e por isso ao chamar o Setter eu vou chamar notify listeners o que quer dizer que eu deixo de precisar deste set State porque de cada vez que houver uma alteraÃ§Ã£o do estado do View Model graÃ§as a este watch este componente este widget vai ser redesenhado vamos jÃ¡ testar se isto estÃ¡ a funcionar Ok isto continua a funcionar apesar da gente ter tirado o set state porque agora o observer observable garante que o page o Main page Ã© notificado cada vez que Ã© alterado o estado da navegaÃ§Ã£o e eu passei a estar a ter isolado esse estado nesta classe Isto pode parecer uma mariquice nÃ³s estamos a isolar este estado porque Ã© que estamos a complicar no fundo esta classe que antes estava a funcionar tÃ£o bem Apenas aqui com uma variÃ¡vel porque isto abre a porta a uma sÃ©rie de comportamentos que depois ficam muito fÃ¡ceis de implementar Imaginem que eu queria implementar na pÃ¡gina dois aqui um botÃ£o que ao carregar nele ele salta diretamente para a pÃ¡gina um como Ã© que a gente faz isso vamos acrescentar aqui um elev Button ok que tem estas duas propriedades para jÃ¡ nÃ£o vou preocupar com o One pressed e no child vou colocar um text saltar para pÃ¡gina um Claro que neste momento Isto nÃ£o funciona o que Ã© que a gente tem que fazer neste onpressed se nÃ£o fosse aquele objeto estÃ¡ extraÃ­do eu ia ter muita dificuldade em conseguir saltar porquÃª Porque eu nÃ£o tenho dentro desta pÃ¡gina nÃ£o teria acesso do nÃ£o Ã© quando el tinha uma vari select index eu nÃ£o tinha maneira de AC lÃ¡ portanto seria complexo eu chegar lÃ¡ agora que tenho por lado injeÃ§Ã£o dependÃªncias e por outro obser OBS Isto fica mais simples primeira coisa Ã© eu tenho que obter aquele isso atravÃ©s de injeÃ§Ã£o dependÃªncias usando o provider Ã© muito simples Ã© sÃ³ fazer Contex dizer que queremos um Main page View Model ponto selected index ig a 0 Vamos mudar isto para uma expressÃ£o vamos formatar isto EntÃ£o reparem o que Ã© que eu estou aqui a fazer eu estou por um lado a obter o Main page View Model atravÃ©s da injeÃ§Ã£o de dependÃªncias e depois estou a dizer que o seu selected index passa a ser zero eu estou alterar o selected index basta-me fazer isto porque isto vai notificar toda a gente que estiver interessada em saber que o estado do Main PV Model mudou uma dessas um desses observadores Ã© nomeadamente o Main page que vai tratar de atualizar isto entÃ£o Vamos alterar isto e cÃ¡ estÃ¡ ele a saltar para a pÃ¡gina um enquanto que se for por aqui continua a funcionar mas assim tambÃ©m funciona em resumo muitas vezes parece exagerado nÃ³s estarmos a usar injeÃ§Ã£o dependÃªncias e o padrÃ£o observer observable para resolver pequenos casos que aparecem na nossa aplicaÃ§Ã£o mas a verdade Ã© que quando nÃ³s desenvolvemos as nossas aplicaÃ§Ãµes desta forma elas a manutenÃ§Ã£o Futura Ã© muito facilitada porque em qualquer momento nÃ³s temos uma separaÃ§Ã£o Clara entre a interface e o estado da interface ou o estado de negÃ³cio dependendo do dos casos e portanto atravÃ©s da injeÃ§Ã£o de dependÃªncias eu rapidamente consigo aceder a esse estado e alterÃ¡-lo e atravÃ©s do observer observable todos os widgets que precisarem se refrescar com base na mudanÃ§a desse estado serÃ£o avisados e serÃ£o refrescados
