Neste vÃ­deo vou introduzir o padrÃ£o observer observable e com ele melhorar ainda mais o nosso controlador de ar-condicionado em particular vou separar melhor a interface grÃ¡fica Da LÃ³gica negÃ³cio jÃ¡ vamos ver como note-se que a utilizaÃ§Ã£o deste padrÃ£o para esta aplicaÃ§Ã£o especÃ­fica que Ã© muito simples Talvez seja exagerada e em condiÃ§Ãµes normais Eu nÃ£o o faria mas desta forma estou a preparar a aplicaÃ§Ã£o jÃ¡ para que do Futuro ela possa por exemplo fazer pedidos a um servidor Acer uma base de dados utilizar sensores tudo operaÃ§Ãµes que demoram algum tempo e que vÃ£o beneficiar bastante deste padrÃ£o vou entÃ£o comeÃ§ar por explicar o que Ã© final o padrÃ£o observer observable como o nome indica existe um objeto observer e um objeto observable o observable Ã© o objeto que Ã© observado e que tem um conjunto de variÃ¡veis vamos chamar-lhe o estado desse objeto e que hÃ¡ um conjunto de observadores que EstÃ£o interessados em mudanÃ§as desse estado cada vez que esse estado muda elas querem ser avisadas querem perceber isso Para isso elas tÃª que comeÃ§ar estes objetos tÃªm que comeÃ§ar por se registrar como observadores do observable e depois de cada vez que hÃ¡ uma variÃ¡vel que muda o observable tem que chamar este notify observers para basicamente notificar todos os observadores podem ser vÃ¡rios de que o estado mudou note-se que o observer registra-se uma vez como observador mas depois o estado vai mudando vÃ¡rias vezes Ok isto repete-se de cada vez que a variÃ¡vel muda algumas vantagens deste padrÃ£o O primeiro Ã© que nÃ³s podemos ter vÃ¡rios objetos observar o mesmo observable Isto pode ser interessante mas a principal vantagem que Ã© que eu quero a razÃ£o pela qual eu quero usar Neste vÃ­deo Ã© que isto permite uma separaÃ§Ã£o Clara de responsabilidades porque o observable o objeto que Ã© observado nÃ£o faz ideia o que Ã© que os observers vÃ£o fazer com isso ele apenas cada vez que muda uma variÃ¡vel notifica e depois cada observer faz o que entender vamos agora ver como Ã© que isso Ã© aplicado em flutter especificamente portanto este padrÃ£o em flutter usa classes ligeiramente con nomes ligeiramente diferentes do observer observable mas o princÃ­pio Ã© o mesmo em vez de observer Ã© um consumer e em vez de observable Ã© um Change notifier e aqui em vez de notify observers Ã© notify listeners de resto o princÃ­pio Ã© o mesmo entÃ£o temos um controlador AC que Ã© o nosso Change notifier Ã© o nosso observable e que tem uma variÃ¡vel temperatura que nÃ³s queremos que seja notificada de cada vez que hÃ¡ uma alteraÃ§Ã£o queremos notificar os consumers neste caso os observadores da deste controlador AC neste caso quem Ã© que Ã© o nosso consumer Ã© o controlador AC peit a interface grÃ¡fica digamos assim entÃ£o o consumer vai-se comeÃ§ar por registrar como observador usando esta eh instruÃ§Ã£o Contex PS cont controlador AC nÃ£o sei se se lembram no vÃ­deo anterior tÃ­nhamos feito um context p read controlador AC para fazer uma injeÃ§Ã£o de dependÃªncia ou seja para obter uma ligaÃ§Ã£o ao controlador AC agora nÃ³s vamos mais longe e nÃ£o sÃ³ obtemos uma ligaÃ§Ã£o ao controlador AC C como observamos ficamos observar esse controlador de cada vez que a temperatura mudar nÃ³s vamos ser avisados o que Ã© que significa nÃ³s chamos avisados neste caso como o nosso objetivo Ã© que a interface grÃ¡fica reflita a alteraÃ§Ã£o do Estado nÃ³s simplesmente este esta mudanÃ§a de estado implica chamar um build deste objeto ou seja deste widget neste caso estamos a falar do widget o quer dizer que este widget ou qualquer widget que seja um consumer ele vai ser refeito vai ser desenhado de cada vez que o estado mudar do objeto que ele basicamente estÃ¡ a observar Vamos entÃ£o implementar este padrÃ£o o nosso controlador AC vai ser o observÃ¡vel e o controlador AC page vai ser O Observador EntÃ£o vamos comeÃ§ar aqui pelo controlor AC para ele ser observÃ¡vel ou seja para ele ser um Change notifier em flutter basta pÃ´r aqui extend chier e depois nÃ£o podemos esquecer de cada vez que mudamos o estado de chamar o notify listeners portanto quando a temperatura aumenta notify listeners quando a temperatura diminui notify listeners basta isto tÃ¡ feito o nosso controlor AC passou a ser observÃ¡vel no entanto isto nÃ£o Ã© suficiente agora temos que deste lado garantir que o nosso controlador a peit estÃ¡ a observar este objeto primeira coisa que vamos fazer Ã© vamos mudar aqui este provider para Change notifier provider porque o provider nÃ£o estÃ¡ preparado provider normal nÃ£o estÃ¡ preparado para que o objeto que a gente retorna aqui seja um Change notifier quando este objeto que a gente retorna Ã© um Change notifier nÃ³s temos que mudar isto para Change notifier provider feito isto O que Ã© que a gente tem que fazer a nÃ­vel do controlador AC page nomeadamente aqui no build NÃ³s antes estÃ¡vamos ao ter atravÃ©s de um read o controlador ac e nÃ³s vamos passar a fazer watch SÃ³ isto ao fazer o Watch significa que passamos nÃ£o nÃ£o sÃ³ obtemos o controlador AC como passamos a observar todas as alteraÃ§Ãµes feitas ao controlador ac ou seja de cada vez que ele mudar este build vai ser chamado como este build vai ser chamado hÃ¡ aqui uma alteraÃ§Ã£o uma simplificaÃ§Ã£o que podemos fazer que Ã© nÃ³s aqui se bem se lembram este controlor diminui controlor aumenta NÃ³s temos que colocar ou tÃ­nhamos que o colocar dentro de um set state para indicar que a interface grÃ¡fica tinha que ser refrescada apÃ³s nÃ³s chamarmos este mÃ©todo no entanto agora que a nossa interface o nosso widget estÃ¡ Ã  escuta de alteraÃ§Ãµes ao controle da Ac isso deixa de ser necessÃ¡rio porque ele vai ser automaticamente refrescado de cada vez que o estado muda do controlor AC portanto podemos simplesmente tirar isto estudo e mesmo assim ele vai funcionar para termos a certeza que isto funciona Eu atÃ© vou arrancar novamente aplicaÃ§Ã£o e reparem como tudo continua a funcionar Apesar de eu ter tirado o set state sÃ³ Relembrando O que Ã© que estÃ¡ aqui a acontecer e o que Ã© que mudou cada vez que nÃ³s carregamos neste mais nÃ³s chamamos o controlador AC aumenta quando chamamos o controlador AC aumenta ele nÃ£o sÃ³ aumenta a temperatura como notifica todos os observadores disso Quem sÃ£o os observadores basicamente neste caso Ã© o controlador AC page que logo a seguir a o build comeÃ§ou por dizer que estava watch Estava Ã  escuta de alteraÃ§Ãµes ao controlor ac ou seja aquele notify listens o que vai fazer Ã© chamar novamente este build e ao chamar novamente este Build a temperatura jÃ¡ vai estar atualizada e como tal eu nÃ£o tenho que fazer aquele set state notem que ao retirar o set state nÃ£o sÃ³ simplifiquei o cÃ³digo como aumentei a separaÃ§Ã£o a divisÃ£o entre interface grÃ¡fica e a lÃ³gica de negÃ³cio nÃ£o Ã© muito correto que a interface grÃ¡fica tenha nÃ£o sÃ³ que se preocupar em chamar o diminui o aumenta como tenha que perceber que isso poderÃ¡ ter um efeito na sua prÃ³pria interface atÃ© porque Ã s vezes nÃ£o tem se a temperatura chegar aos 40Âº o facto de eu chamar o aumenta nÃ£o implica refrescar o ecrÃ£ mas se eu tiver lÃ¡ um set state eu vou estar sempre a reusar o ecrÃ£ neste momento o listener apenas Ã© chamado se realmente houver um aumento da temperatura para compreendermos melhor o padrÃ£o observer observable podemos melhorar os testes unitÃ¡rios para quem nÃ£o se lembra os testes unitÃ¡rios sÃ£o testes que testam apenas uma classe isolada da interface grÃ¡fica nÃ£o precisam de emulador e vamos por exemplo pegar aqui neste teste e alterÃ¡-lo para que ele tire partido do facto de que agora o controlador AC Ã© observÃ¡vel para isso nÃ³s vamos registar noos como observadores deste controlador ac e como Ã© que fazemos isso e agora reparem que el aqui um Bloc de cÃ³digo que vai chamado quando control mudar este Bloc de cÃ³igo estÃ¡ Ã© observador daquele vamos comear por aqui um print apenas a dizer o controlador mudou vamos ver o que acontecei V aqui mais uns primeiro aqui um print como observador e aqui um print aumentei a temperatura vamos correr este teste e ver o que acontece registrei como observador aumentei a temperatura o controlador mudou note-se que isto era o que era suposto ou seja apÃ³s aumentar a temperatura Ã© que nÃ³s recebemos uma notificaÃ§Ã£o a dizer que o controlador mudou no entanto Isto pode parecer confuso porque olhando aqui para a ordem dos prints parece que ele iria escrever como observador controlador mudou e aumentei a temperatura lembrem-se que este bloco de cÃ³digo sÃ³ Ã© chamado apÃ³s eu eu invocar o aumenta e ele notificar os listeners de que o controlador mudou portanto nÃ£o se nÃ£o se baralhas introduÃ§Ã£o podemos melhorar entÃ£o o nosso teste para que este expect da temperatura do 21 seja feito apÃ³s ser notificado ou seja vou tirÃ¡-lo daqui vou colocÃ¡-lo aqui quando eu aumentar temperatura eu vou notificar os listeners e neste caso este listener vai apanhar essa notificaÃ§Ã£o e vai verificar se a temperatura passou a ser 21 vou tirar daqui os prints Porque nÃ£o devemos ter estes prints nos nossos testes e vou correr novamente e passou o teste
